/**
* Copyright (C) 2017-2020 | Dry Eel Development
*
* Official EOSCore Documentation: https://eeldev.com
*/

#pragma once

#include "CoreMinimal.h"
#include "Core/EOSHelpers.h"
#include "eos_auth_types.h"
#include "Connect/EOSConnectTypes.h"
#include "EOSAuthTypes.generated.h"

class UCoreAuthentication;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
//		Enums
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

/**
 * Flags used to describe how the account linking operation is to be performed.
 *
 * @see EOS_Auth_LinkAccount
 */
UENUM(BlueprintType)
enum class EEOSELinkAccountFlags : uint8
{
	/**
	 * Default flag used for a standard account linking operation.
	 *
	 * This flag is set when using a continuance token received from a previous call to the EOS_Auth_Login API,
	 * when the local user has not yet been successfully logged in to an Epic Account yet.
	 */
	EOS_LA_NoFlags = 0x0,
	/**
	 * Specified when the EOS_ContinuanceToken describes a Nintendo NSA ID account type.
	 *
	 * This flag is used only with, and must be set, when the continuance token was received from a previous call
	 * to the EOS_Auth_Login API using the EOS_EExternalCredentialType::EOS_ECT_NINTENDO_NSA_ID_TOKEN login type.
	 */
	EOS_LA_NintendoNsaId = 0x1
};

/**
 * All possible types of login methods, availability depends on permissions granted to the client
 *
 * @see EOS_Auth_Login
 * @see EOS_Auth_Credentials
 */
UENUM(BlueprintType)
enum class EEOSLoginCredentialType : uint8
{
	/** Email / Password. Use of this login type is restricted. */
	EOS_LCT_Password = 0,
	/** Exchange code, typically generated by launcher */
	EOS_LCT_ExchangeCode = 1,
	/**
	 * Long-lived access token that is stored on the local device to allow persisting a user login session over game sessions.
	 * When using this login type, if an existing access token is not found or it is invalid or otherwise expired, the error result EOS_EResult::EOS_InvalidAuth is returned.
	 *
	 * On Desktop and Mobile platforms, the persistent access token is automatically managed
	 * by the SDK that stores it in the keychain of the currently logged in user of the local device.
	 *
	 * On Console platforms, after a successful login using the EOS_LCT_DeviceCode login type,
	 * the persistent access token is retrieved using the EOS_Auth_CopyUserAuthToken API and
	 * stored by the application for the currently logged in user of the local device.
	 */
	 EOS_LCT_PersistentAuth = 2,
	 /**
	  * Console platforms only. (Not Desktop or Mobile)
	  *
	  * Initiates a PIN grant login flow that is used to login a local user to their Epic Account for the first time,
	  * and also whenever their locally persisted login credentials would have expired.
	  *
	  * The flow is as following:
	  * 1. Game initiates the user login flow by calling EOS_Auth_Login API with the EOS_LCT_DeviceCode login type.
	  * 2. The SDK internally requests the authentication backend service to begin the login flow, and returns the game
	  * a new randomly generated device code along with authorization URL information needed to complete the flow.
	  * This information is returned via the EOS_Auth_Login API callback. The EOS_Auth_LoginCallbackInfo::ResultCode
	  * will be set to EOS_Auth_PinGrantCode and the EOS_Auth_PinGrantInfo struct will contain the needed information.
	  * 3. Game presents the device code and the authorization URL information on screen to the end-user.
	  * 4. The user will login to their Epic Account using an external device, e.g. a mobile device or a desktop PC,
	  * by browsing to the presented authentication URL and entering the device code presented by the game on the console.
	  * 5. Once the user has successfully logged in on their external device, the SDK will call the EOS_Auth_Login callback
	  * once more with the operation result code. If the user failed to login within the allowed time before the device code
	  * would expire, the result code returned by the callback will contain the appropriate error result.
	  *
	  * After logging in a local user for the first time, the game can remember the user login to allow automatically logging
	  * in the same user the next time they start the game. This avoids prompting the same user to go through the login flow
	  * across multiple game sessions over long periods of time.
	  * To do this, after a successful login using the EOS_LCT_DeviceCode login type, the game can call the EOS_Auth_CopyUserAuthToken API
	  * to retrieve a long-lived refresh token that is specifically created for this purpose on Console. The game can store
	  * the long-lived refresh token locally on the device, for the currently logged in local user of the device.
	  * Then, on subsequent game starts the game can call the EOS_Auth_Login API with the previously stored refresh token and
	  * using the EOS_LCT_PersistentAuth login type to automatically login the current local user of the device.
	  */
	  EOS_LCT_DeviceCode = 3,
	  /** Request credentials from the EOS SDK Dev Auth Tool */
	  EOS_LCT_Developer = 4,
	  /** Refresh token */
	  EOS_LCT_RefreshToken = 5,
	  /** Initiate a login through the account portal. Cannot be used on consoles. */
	  EOS_LCT_AccountPortal = 6,
	  /** Initiate a login via an external provider (e.g. Steam, PSN, XBL, Nintendo). */
	  EOS_LCT_ExternalAuth = 7
};

/**
 * Types of auth tokens
 *
 * @see EOS_Auth_CopyUserAuthToken
 * @see EOS_Auth_Token
 */
UENUM(BlueprintType)
enum class EOSEAuthTokenType : uint8
{
	/** Auth token is for a validated client */
	EOS_ATT_Client = 0,
	/** Auth token is for a validated user */
	EOS_ATT_User = 1
};

/* Flags that describe user permissions */
UENUM(BlueprintType, meta = (Bitflags))
enum class EOSEAuthScopeFlags : uint8
{
	EOS_AS_NoFlags = 0x0,
	/** Permissions to see your account ID, display name, language and country */
	EOS_AS_BasicProfile = 0x1,
	/** Permissions to see a list of your friends who use this application */
	EOS_AS_FriendsList = 0x2,
	/** Permissions to set your online presence and see presence of your friends */
	EOS_AS_Presence = 0x4
};

ENUM_CLASS_FLAGS(EOSEAuthScopeFlags);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
//		Structs
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

/** A structure that contains an auth token. These structures are created by EOS_Auth_CopyUserAuthToken and must be passed to EOS_Auth_Token_Release. */
USTRUCT(BlueprintType)
struct FEOSAuthToken
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Name of the app related to the client id involved with this token */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString App;
	/** Client id that requested this token */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString ClientId;
	/** User account associated with this auth token */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId AccountId;
	/** Access token for the current user login session */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FAccessToken AccessToken;
	/** Time before the access token expires, in seconds, relative to the call to EOS_Auth_CopyUserAuthToken */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString ExpiresIn;
	/** Absolute time in UTC before the access token expires, in ISO 8601 format */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString ExpiresAt;
	/** Type of auth token */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSEAuthTokenType AuthType;
	/**
	 * Refresh token.
	 * This member has two separate use cases:
	 *
	 * 1. Launching the game from Epic Games Launcher, having an intermediate process (such as another launcher) that uses
	 * Epic authentication in-between.
	 * In this use case, an intermediate launcher that has logged in the user using the EOS_LCT_ExchangeCode login type
	 * can copy the refresh token using the EOS_Auth_CopyUserAuthToken API and pass it in launch parameters for the started
	 * game client that can then login the user again using the refresh token this time with the EOS_LCT_RefreshToken
	 * login type.
	 *
	 * 2. Persistent auth on Console platforms, to remember user login across game sessions over longer period of times
	 * without having to prompt the user to explicitly login each time they run the game.
	 * In this use case, a local user is logged in with their Epic Account for the first time using the EOS_LCT_DeviceCode
	 * login type. Specific to the EOS_LCT_DeviceCode login type, the SDK receives a long-lived refresh token instead of a
	 * regular short-lived refresh token. The game can use the EOS_Auth_CopyUserAuthToken API to copy the long-lived refresh
	 * token and store it locally for the currently logged in local user of the console device.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString RefreshToken;
	/** Time before the access token expires, in seconds, relative to the call to EOS_Auth_CopyUserAuthToken */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString RefreshExpiresIn;
	/** Absolute time in UTC before the refresh token expires, in ISO 8601 format */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString RefreshExpiresAt;
public:
	explicit FEOSAuthToken()
		: ApiVersion(EOS_AUTH_TOKEN_API_LATEST)
		, AuthType(EOSEAuthTokenType::EOS_ATT_Client) {}
	FEOSAuthToken(const EOS_Auth_Token& data)
		: ApiVersion(EOS_AUTH_TOKEN_API_LATEST)
		, App(UTF8_TO_TCHAR(data.App))
		, ClientId(UTF8_TO_TCHAR(data.ClientId))
		, AccountId(data.AccountId)
		, AccessToken(data.AccessToken)
		, ExpiresIn(LexToString(data.ExpiresIn))
		, ExpiresAt(UTF8_TO_TCHAR(data.ExpiresAt))
		, AuthType(static_cast<EOSEAuthTokenType>(data.AuthType))
		, RefreshToken(UTF8_TO_TCHAR(data.RefreshToken))
		, RefreshExpiresIn(LexToString(data.RefreshExpiresIn))
		, RefreshExpiresAt(UTF8_TO_TCHAR(data.RefreshExpiresAt))
	{}
};

/**
 * A structure that contains login credentials. What is required is dependent on the type of login being initiated.
 *
 * This is part of the input structure EOS_Auth_LoginOptions and related to device auth.
 *
 * Use of the Id and Token fields differs based on the Type. They should be null, unless specified:
 * EOS_LCT_Password - Id is the email address, and Token is the password.
 * EOS_LCT_ExchangeCode - Token is the exchange code.
 * EOS_LCT_PersistentAuth - If targeting console platforms, Token is the long lived refresh token. Otherwise N/A.
 * EOS_LCT_DeviceCode - N/A.
 * EOS_LCT_Developer - Id is the host (e.g. 127.0.0.1:10000), and Token is the credential name.
 * EOS_LCT_RefreshToken - Token is the refresh token.
 * EOS_LCT_AccountPortal - SystemAuthCredentialsOptions may be required if targeting mobile platforms. Otherwise N/A.
 * EOS_LCT_ExternalAuth - Token is the external auth token specified by ExternalType.
 *
 * @see EOS_ELoginCredentialType
 * @see EOS_Auth_Login
 * @see EOS_Auth_DeletePersistentAuthOptions
 */
USTRUCT(BlueprintType)
struct FEOSAuthCredentials
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Id of the user logging in, based on EOS_ELoginCredentialType */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString ID;
	/** Credentials or token related to the user logging in */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString Token;
	/** Type of login. Needed to identify the auth method to use */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EEOSLoginCredentialType Type;
	/**
	* This field is for system specific options if any.
	*
	* If provided then the structure will be located in <System>/eos_<system>.h.
	* The structure will be named EOS_<System>_Auth_CredentialsOptions.
	*/
	void* SystemAuthCredentialsOptions;
	/**
	 * Type of external login. Needed to identify the external auth method to use.
	 * Used when login type is set to EOS_LCT_ExternalAuth, ignored for other EOS_ELoginCredentialType methods.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EEOSEExternalCredentialType ExternalType;
public:
	explicit FEOSAuthCredentials()
		: ApiVersion(EOS_AUTH_CREDENTIALS_API_LATEST) 
		, Type(EEOSLoginCredentialType::EOS_LCT_AccountPortal)
		, SystemAuthCredentialsOptions(nullptr)
		, ExternalType(EEOSEExternalCredentialType::EOS_ECT_EPIC)
		{}
};

/**
 * Input parameters for the EOS_Auth_Login Function.
 */
USTRUCT(BlueprintType)
struct FEOSAuthLoginOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Credentials specified for a given login method */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSAuthCredentials Credentials;
	/** Auth scope flags are permissions to request from the user while they are logging in. This is a bitwise-or union of EOS_EAuthScopeFlags flags defined above */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth", meta = (Bitmask, BitmaskEnum = "EOSEAuthScopeFlags"))
		int32 ScopeFlags;
public:
	explicit FEOSAuthLoginOptions()
		: ApiVersion(EOS_AUTH_LOGIN_API_LATEST)
		, ScopeFlags(0) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthPinGrantInfo
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Code the user must input on an external device to activate the login */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString UserCode;
	/** The end-user verification URI. Users can be asked to manually type this into their browser. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString VerificationURI;
	/** Time the user has, in seconds, to complete the process or else timeout */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		int32 ExpiresIn;
	/** A verification URI that includes the user code. Useful for non-textual transmission. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString VerificationURIComplete;
public:
	explicit FEOSAuthPinGrantInfo()
		: ApiVersion(EOS_AUTH_PINGRANTINFO_API_LATEST)
		, ExpiresIn(0) {}
	FEOSAuthPinGrantInfo(const EOS_Auth_PinGrantInfo& data)
		: ApiVersion(EOS_AUTH_PINGRANTINFO_API_LATEST)
		, UserCode(data.UserCode != nullptr ? data.UserCode : "")
		, VerificationURI(data.VerificationURI != nullptr ? data.VerificationURI : "")
		, ExpiresIn(data.ExpiresIn)
		, VerificationURIComplete(data.VerificationURIComplete != nullptr ? data.VerificationURIComplete : "")
	{}
};

/**
 * Intermediate data needed to complete account restriction verification during login flow, returned by EOS_Auth_LoginCallbackInfo when the ResultCode is EOS_Auth_AccountFeatureRestricted
 * The URI inside should be exposed to the user for entry in a web browser. The URI must be copied out of this struct before completion of the callback.
 */
USTRUCT(BlueprintType)
struct FEOSAuthAccountFeatureRestrictedInfo
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** The end-user verification URI. Users must be asked to open the page in a browser to address the restrictions */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString VerificationURI;
public:
	explicit FEOSAuthAccountFeatureRestrictedInfo()
		: ApiVersion(EOS_AUTH_ACCOUNTFEATURERESTRICTEDINFO_API_LATEST) { }
	FEOSAuthAccountFeatureRestrictedInfo(const EOS_Auth_AccountFeatureRestrictedInfo& data)
		: ApiVersion(EOS_AUTH_ACCOUNTFEATURERESTRICTEDINFO_API_LATEST)
		, VerificationURI(data.VerificationURI)
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthLoginCallbackInfo
{
	GENERATED_BODY()
public:
	/** Result code for the operation. EOS_Success is returned for a successful query, otherwise one of the error codes is returned. See eos_common.h */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSResult ResultCode;
	/** Context that was passed into EOS_Auth_Login */
		void* ClientData;
	/** Account ID of the local player requesting the information */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
	/** Optional data returned in the middle of a EOS_LCT_DeviceCode request */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSAuthPinGrantInfo PinGrantInfo;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSAuthAccountFeatureRestrictedInfo AccountFeatureRestrictedInfo;

public:
	explicit FEOSAuthLoginCallbackInfo()
		: ResultCode(EOSResult::EOS_ServiceFailure)
		, ClientData(nullptr) { }
	FEOSAuthLoginCallbackInfo(const EOS_Auth_LoginCallbackInfo& data)
		: ResultCode(EOSHelpers::ToEOSCoreResult(data.ResultCode))
		, ClientData(data.ClientData)
		, LocalUserId(data.LocalUserId)
		, PinGrantInfo(data.PinGrantInfo ? *data.PinGrantInfo : FEOSAuthPinGrantInfo())
		, AccountFeatureRestrictedInfo(data.AccountFeatureRestrictedInfo ? *data.AccountFeatureRestrictedInfo : FEOSAuthAccountFeatureRestrictedInfo())
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthLogoutOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Account ID of the local player requesting the information */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
public:
	explicit FEOSAuthLogoutOptions()
		: ApiVersion(EOS_AUTH_LOGOUT_API_LATEST) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthLogoutCallbackInfo
{
	GENERATED_BODY()
public:
	/** Result code for the operation. EOS_Success is returned for a successful query, otherwise one of the error codes is returned. See eos_common.h */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSResult ResultCode;
	/** Context that was passed into EOS_Auth_Login */
		void* ClientData;
	/** Account ID of the local player requesting the information */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
public:
	explicit FEOSAuthLogoutCallbackInfo()
		: ResultCode(EOSResult::EOS_ServiceFailure)
		, ClientData(nullptr) { }
	FEOSAuthLogoutCallbackInfo(const EOS_Auth_LogoutCallbackInfo& data)
		: ResultCode(EOSHelpers::ToEOSCoreResult(data.ResultCode))
		, ClientData(data.ClientData)
		, LocalUserId(data.LocalUserId) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthLinkAccountOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Account ID of the local player requesting the information */
	/**
	 * Combination of the enumeration flags to specify how the account linking operation will be performed.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EEOSELinkAccountFlags LinkAccountFlags;
	/**
	 * Continuance token received from a previous call to the EOS_Auth_Login API.
	 *
	 * A continuance token is received in the case when the external account used for login was not found to be linked
	 * against any existing Epic Account. In such case, the application needs to proceed with an account linking operation in which case
	 * the user is first asked to create a new account or login into their existing Epic Account, and then link their external account to it.
	 * Alternatively, the application may suggest the user to login using another external account that they have already linked to their existing Epic Account.
	 * In this flow, the external account is typically the currently logged in local platform user account.
	 * It can also be another external user account that the user is offered to login with.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FContinuanceToken ContinuanceToken;

	/**
	 * The Epic Online Services Account ID of the logged in local user whose Epic Account will be linked with the local Nintendo NSA ID Account. By default set to NULL.
	 *
	 * This parameter is only used and required to be set when EOS_ELinkAccountFlags::EOS_LA_NintendoNsaId is specified.
	 * Otherwise, set to NULL, as the standard account linking and login flow using continuance token will handle logging in the user to their Epic Account.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
public:
	explicit FEOSAuthLinkAccountOptions()
		: ApiVersion(EOS_AUTH_LINKACCOUNT_API_LATEST) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthLinkAccountCallbackInfo
{
	GENERATED_BODY()
public:
	/** The EOS_EResult code for the operation. EOS_Success indicates that the operation succeeded; other codes indicate errors. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSResult ResultCode;
	/** Context that was passed into EOS_Auth_LinkAccount */
		void* ClientData;
	/** The Epic Online Services Account ID of the local user whose account has been linked during login */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
	/**
	 * Optional data returned when ResultCode is EOS_Auth_PinGrantCode.
	 *
	 * Once the user has logged in with their Epic Online Services account, the account will be linked with the external account supplied when EOS_Auth_Login was called.
	 * EOS_Auth_OnLinkAccountCallback will be fired again with ResultCode in EOS_Auth_LinkAccountCallbackInfo set to EOS_Success.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSAuthPinGrantInfo PinGrantInfo;
public:
	explicit FEOSAuthLinkAccountCallbackInfo()
		: ResultCode(EOSResult::EOS_ServiceFailure)
		, ClientData(nullptr) { }

	FEOSAuthLinkAccountCallbackInfo(const EOS_Auth_LinkAccountCallbackInfo& data)
		: ResultCode(EOSHelpers::ToEOSCoreResult(data.ResultCode))
		, ClientData(data.ClientData)
		, LocalUserId(data.LocalUserId)
		, PinGrantInfo(*data.PinGrantInfo)
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthVerifyUserAuthOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/** Auth token to verify against the backend service */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSAuthToken AuthToken;
public:
	explicit FEOSAuthVerifyUserAuthOptions()
		: ApiVersion(EOS_AUTH_VERIFYUSERAUTH_API_LATEST) {}
	FEOSAuthVerifyUserAuthOptions(const EOS_Auth_VerifyUserAuthOptions& data)
		: ApiVersion(EOS_AUTH_VERIFYUSERAUTH_API_LATEST)
		, AuthToken(*data.AuthToken)
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthVerifyUserAuthCallbackInfo
{
	GENERATED_BODY()
public:
	/** Result code for the operation. EOS_Success is returned for a successful query, otherwise one of the error codes is returned. See eos_common.h */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSResult ResultCode;
	/** Context that was passed into EOS_Auth_Login */
		void* ClientData;
public:
	explicit FEOSAuthVerifyUserAuthCallbackInfo()
		: ResultCode(EOSResult::EOS_ServiceFailure)
		, ClientData(nullptr) { }
	FEOSAuthVerifyUserAuthCallbackInfo(const EOS_Auth_VerifyUserAuthCallbackInfo& data)
		: ResultCode(EOSHelpers::ToEOSCoreResult(data.ResultCode))
		, ClientData(data.ClientData)
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthCopyUserAuthTokenOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	explicit FEOSAuthCopyUserAuthTokenOptions()
		: ApiVersion(EOS_AUTH_COPYUSERAUTHTOKEN_API_LATEST)	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthAddNotifyLoginStatusChangedOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	explicit FEOSAuthAddNotifyLoginStatusChangedOptions()
		: ApiVersion(EOS_AUTH_ADDNOTIFYLOGINSTATUSCHANGED_API_LATEST) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthDeletePersistentAuthOptions
{
	GENERATED_BODY()
public:
	/** Version of the API */
	int32 ApiVersion;
public:
	/**
	 * A long-lived refresh token that is used with the EOS_LCT_PersistentAuth login type and is to be revoked from the authentication server. Only used on Console platforms.
	 * On Desktop and Mobile platforms, set this parameter to NULL.
	 */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FString RefreshToken;
public:
	explicit FEOSAuthDeletePersistentAuthOptions()
		: ApiVersion(EOS_AUTH_DELETEPERSISTENTAUTH_API_LATEST) {}
};

USTRUCT(BlueprintType)
struct FEOSAuthDeletePersistentAuthCallbackInfo
{
	GENERATED_BODY()
public:
	/** Result code for the operation. EOS_Success is returned for a successful query, otherwise one of the error codes is returned. See eos_common.h */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSResult ResultCode;
	/** Context that was passed into EOS_Auth_DeletePersistentAuth */
		void* ClientData;
public:
	explicit FEOSAuthDeletePersistentAuthCallbackInfo()
		: ResultCode(EOSResult::EOS_ServiceFailure)
		, ClientData(nullptr) { }
	FEOSAuthDeletePersistentAuthCallbackInfo(const EOS_Auth_DeletePersistentAuthCallbackInfo& data)
		: ResultCode(EOSHelpers::ToEOSCoreResult(data.ResultCode))
		, ClientData(data.ClientData)
	{}
};

USTRUCT(BlueprintType)
struct FEOSAuthLoginStatusChangedCallbackInfo
{
	GENERATED_BODY()
public:
	/** Context that was passed into EOS_Auth_AddNotifyLoginStatusChanged */
		void* ClientData;
	/** Account ID of the local player whose status has changed */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSEpicAccountId LocalUserId;
	/** The status prior to the change */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSELoginStatus PrevStatus;
	/** The status at the time of the notification */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		EOSELoginStatus CurrentStatus;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Auth")
		FEOSNotificationId NotificationID;
public:
	explicit FEOSAuthLoginStatusChangedCallbackInfo()
		: ClientData(nullptr)
		, PrevStatus(EOSELoginStatus::EOS_LS_NotLoggedIn)
		, CurrentStatus(EOSELoginStatus::EOS_LS_NotLoggedIn) { }
	FEOSAuthLoginStatusChangedCallbackInfo(const EOS_Auth_LoginStatusChangedCallbackInfo& data)
		: ClientData(data.ClientData)
		, LocalUserId(data.LocalUserId)
		, PrevStatus(static_cast<EOSELoginStatus>(data.PrevStatus))
		, CurrentStatus(static_cast<EOSELoginStatus>(data.CurrentStatus))
	{}
};

USTRUCT(BlueprintType)
struct FEOSHAuth
{
	GENERATED_BODY()
public:
	EOS_HAuth Handle;
public:
	explicit FEOSHAuth() 
		: Handle(nullptr) {}
	FEOSHAuth(const EOS_HAuth& data)
		: Handle(data) {}
};

DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthLoginCallback, const FEOSAuthLoginCallbackInfo&, data);
DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthLogoutCallback, const FEOSAuthLogoutCallbackInfo&, data);
DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthLinkAccountCallback, const FEOSAuthLinkAccountCallbackInfo&, data);
DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthVerifyUserAuthCallback, const FEOSAuthVerifyUserAuthCallbackInfo&, data);
DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthDeletePersistentAuthCallback, const FEOSAuthDeletePersistentAuthCallbackInfo&, data);
DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAuthLoginStatusChangedCallback, const FEOSAuthLoginStatusChangedCallbackInfo&, data);

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthLoginCallbackDelegate, const FEOSAuthLoginCallbackInfo&, data);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthLogoutCallbackDelegate, const FEOSAuthLogoutCallbackInfo&, data);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthLinkAccountCallbackDelegate, const FEOSAuthLinkAccountCallbackInfo&, data);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthVerifyUserAuthCallbackDelegate, const FEOSAuthVerifyUserAuthCallbackInfo&, data);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthDeletePersistentAuthCallbackDelegate, const FEOSAuthDeletePersistentAuthCallbackInfo&, data);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAuthLoginStatusChangedCallbackDelegate, const FEOSAuthLoginStatusChangedCallbackInfo&, data);

struct FAuthLoginCallback
{
public:
	UCoreAuthentication* AuthenticationObject;
	FOnAuthLoginCallback Callback;
public:
	FAuthLoginCallback(UCoreAuthentication* obj, const FOnAuthLoginCallback& callback)
		: AuthenticationObject(obj)
		, Callback(callback) {}
};

struct FAuthLogoutCallback
{
public:
	UCoreAuthentication* AuthenticationObject;
	FOnAuthLogoutCallback Callback;
public:
	FAuthLogoutCallback(UCoreAuthentication* obj, const FOnAuthLogoutCallback& callback)
		: AuthenticationObject(obj)
		, Callback(callback) {}
};

struct FAuthLinkAccountCallback
{
public:
	UCoreAuthentication* AuthenticationObject;
	FOnAuthLinkAccountCallback Callback;
public:
	FAuthLinkAccountCallback(UCoreAuthentication* obj, const FOnAuthLinkAccountCallback& callback)
		: AuthenticationObject(obj)
		, Callback(callback) {}
};

struct FAuthDeletePersistentAuthCallback
{
public:
	UCoreAuthentication* AuthenticationObject;
	FOnAuthDeletePersistentAuthCallback Callback;
public:
	FAuthDeletePersistentAuthCallback(UCoreAuthentication* obj, const FOnAuthDeletePersistentAuthCallback& callback)
		: AuthenticationObject(obj)
		, Callback(callback) {}
};

struct FAuthVerifyUserAuthCallback
{
public:
	UCoreAuthentication* AuthenticationObject;
	FOnAuthVerifyUserAuthCallback Callback;
public:
	FAuthVerifyUserAuthCallback(UCoreAuthentication* obj, const FOnAuthVerifyUserAuthCallback& callback)
		: AuthenticationObject(obj)
		, Callback(callback) {}
};
